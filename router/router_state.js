"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tree_1 = require('./utils/tree');
var url_tree_1 = require('./url_tree');
var shared_1 = require('./shared');
var BehaviorSubject_1 = require('rxjs/BehaviorSubject');
var RouterState = (function (_super) {
    __extends(RouterState, _super);
    function RouterState(root, queryParams, fragment, snapshot) {
        _super.call(this, root);
        this.queryParams = queryParams;
        this.fragment = fragment;
        this.snapshot = snapshot;
    }
    return RouterState;
}(tree_1.Tree));
exports.RouterState = RouterState;
function createEmptyState(rootComponent) {
    var snapshot = createEmptyStateSnapshot(rootComponent);
    var emptyUrl = new BehaviorSubject_1.BehaviorSubject([new url_tree_1.UrlSegment("", {}, shared_1.PRIMARY_OUTLET)]);
    var emptyParams = new BehaviorSubject_1.BehaviorSubject({});
    var emptyQueryParams = new BehaviorSubject_1.BehaviorSubject({});
    var fragment = new BehaviorSubject_1.BehaviorSubject("");
    var activated = new ActivatedRoute(emptyUrl, emptyParams, shared_1.PRIMARY_OUTLET, rootComponent, snapshot.root);
    return new RouterState(new tree_1.TreeNode(activated, []), emptyQueryParams, fragment, snapshot);
}
exports.createEmptyState = createEmptyState;
function createEmptyStateSnapshot(rootComponent) {
    var emptyUrl = [new url_tree_1.UrlSegment("", {}, shared_1.PRIMARY_OUTLET)];
    var emptyParams = {};
    var emptyQueryParams = {};
    var fragment = "";
    var activated = new ActivatedRouteSnapshot(emptyUrl, emptyParams, shared_1.PRIMARY_OUTLET, rootComponent, null);
    return new RouterStateSnapshot(new tree_1.TreeNode(activated, []), emptyQueryParams, fragment);
}
var ActivatedRoute = (function () {
    function ActivatedRoute(urlSegments, params, outlet, component, snapshot) {
        this.urlSegments = urlSegments;
        this.params = params;
        this.outlet = outlet;
        this.component = component;
        this.snapshot = snapshot;
    }
    return ActivatedRoute;
}());
exports.ActivatedRoute = ActivatedRoute;
var ActivatedRouteSnapshot = (function () {
    function ActivatedRouteSnapshot(urlSegments, params, outlet, component, routeConfig) {
        this.urlSegments = urlSegments;
        this.params = params;
        this.outlet = outlet;
        this.component = component;
        this._routeConfig = routeConfig;
    }
    return ActivatedRouteSnapshot;
}());
exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
var RouterStateSnapshot = (function (_super) {
    __extends(RouterStateSnapshot, _super);
    function RouterStateSnapshot(root, queryParams, fragment) {
        _super.call(this, root);
        this.queryParams = queryParams;
        this.fragment = fragment;
    }
    return RouterStateSnapshot;
}(tree_1.Tree));
exports.RouterStateSnapshot = RouterStateSnapshot;
//# sourceMappingURL=data:application/json;base64,