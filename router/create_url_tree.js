"use strict";
var url_tree_1 = require('./url_tree');
var tree_1 = require('./utils/tree');
var collection_1 = require('./utils/collection');
var shared_1 = require('./shared');
function createUrlTree(route, urlTree, commands, queryParameters, fragment) {
    if (commands.length === 0) {
        return tree(urlTree._root, urlTree, queryParameters, fragment);
    }
    var normalizedCommands = normalizeCommands(commands);
    if (navigateToRoot(normalizedCommands)) {
        return tree(new tree_1.TreeNode(urlTree.root, []), urlTree, queryParameters, fragment);
    }
    var startingNode = findStartingNode(normalizedCommands, urlTree, route);
    var updated = normalizedCommands.commands.length > 0 ?
        updateMany(startingNode.children.slice(0), normalizedCommands.commands) :
        [];
    var newRoot = constructNewTree(urlTree._root, startingNode, updated);
    return tree(newRoot, urlTree, queryParameters, fragment);
}
exports.createUrlTree = createUrlTree;
function tree(root, urlTree, queryParameters, fragment) {
    var q = queryParameters ? stringify(queryParameters) : urlTree.queryParameters;
    var f = fragment ? fragment : urlTree.fragment;
    return new url_tree_1.UrlTree(root, q, f);
}
function navigateToRoot(normalizedChange) {
    return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 &&
        normalizedChange.commands[0] == "/";
}
var NormalizedNavigationCommands = (function () {
    function NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {
        this.isAbsolute = isAbsolute;
        this.numberOfDoubleDots = numberOfDoubleDots;
        this.commands = commands;
    }
    return NormalizedNavigationCommands;
}());
function normalizeCommands(commands) {
    if ((typeof commands[0] === "string") && commands.length === 1 && commands[0] == "/") {
        return new NormalizedNavigationCommands(true, 0, commands);
    }
    var numberOfDoubleDots = 0;
    var isAbsolute = false;
    var res = [];
    for (var i = 0; i < commands.length; ++i) {
        var c = commands[i];
        if (!(typeof c === "string")) {
            res.push(c);
            continue;
        }
        var parts = c.split('/');
        for (var j = 0; j < parts.length; ++j) {
            var cc = parts[j];
            if (i == 0) {
                if (j == 0 && cc == ".") {
                }
                else if (j == 0 && cc == "") {
                    isAbsolute = true;
                }
                else if (cc == "..") {
                    numberOfDoubleDots++;
                }
                else if (cc != '') {
                    res.push(cc);
                }
            }
            else {
                if (cc != '') {
                    res.push(cc);
                }
            }
        }
    }
    return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
}
function findStartingNode(normalizedChange, urlTree, route) {
    if (normalizedChange.isAbsolute) {
        return urlTree._root;
    }
    else {
        var urlSegment = findUrlSegment(route, urlTree, normalizedChange.numberOfDoubleDots);
        return findMatchingNode(urlSegment, urlTree._root);
    }
}
function findUrlSegment(route, urlTree, numberOfDoubleDots) {
    var urlSegment = route.snapshot._lastUrlSegment;
    var path = urlTree.pathFromRoot(urlSegment);
    if (path.length <= numberOfDoubleDots) {
        throw new Error("Invalid number of '../'");
    }
    return path[path.length - 1 - numberOfDoubleDots];
}
function findMatchingNode(segment, node) {
    if (node.value === segment)
        return node;
    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
        var c = _a[_i];
        var r = findMatchingNode(segment, c);
        if (r)
            return r;
    }
    throw new Error("Cannot find url segment '" + segment + "'");
}
function constructNewTree(node, original, updated) {
    if (node === original) {
        return new tree_1.TreeNode(node.value, updated);
    }
    else {
        return new tree_1.TreeNode(node.value, node.children.map(function (c) { return constructNewTree(c, original, updated); }));
    }
}
function updateMany(nodes, commands) {
    var outlet = getOutlet(commands);
    var nodesInRightOutlet = nodes.filter(function (c) { return c.value.outlet === outlet; });
    if (nodesInRightOutlet.length > 0) {
        var nodeRightOutlet = nodesInRightOutlet[0];
        nodes[nodes.indexOf(nodeRightOutlet)] = update(nodeRightOutlet, commands);
    }
    else {
        nodes.push(update(null, commands));
    }
    return nodes;
}
function getPath(commands) {
    if (!(typeof commands[0] === "string"))
        return commands[0];
    var parts = commands[0].toString().split(":");
    return parts.length > 1 ? parts[1] : commands[0];
}
function getOutlet(commands) {
    if (!(typeof commands[0] === "string"))
        return shared_1.PRIMARY_OUTLET;
    var parts = commands[0].toString().split(":");
    return parts.length > 1 ? parts[0] : shared_1.PRIMARY_OUTLET;
}
function update(node, commands) {
    var rest = commands.slice(1);
    var next = rest.length === 0 ? null : rest[0];
    var outlet = getOutlet(commands);
    var path = getPath(commands);
    if (!node && !(typeof next === 'object')) {
        var urlSegment = new url_tree_1.UrlSegment(path, {}, outlet);
        var children = rest.length === 0 ? [] : [update(null, rest)];
        return new tree_1.TreeNode(urlSegment, children);
    }
    else if (!node && typeof next === 'object') {
        var urlSegment = new url_tree_1.UrlSegment(path, stringify(next), outlet);
        return recurse(urlSegment, node, rest.slice(1));
    }
    else if (node && outlet !== node.value.outlet) {
        return node;
    }
    else if (node && typeof path === 'object') {
        var newSegment = new url_tree_1.UrlSegment(node.value.path, stringify(path), node.value.outlet);
        return recurse(newSegment, node, rest);
    }
    else if (node && typeof next === 'object' && compare(path, stringify(next), node.value)) {
        return recurse(node.value, node, rest.slice(1));
    }
    else if (node && typeof next === 'object') {
        var urlSegment = new url_tree_1.UrlSegment(path, stringify(next), outlet);
        return recurse(urlSegment, node, rest.slice(1));
    }
    else if (node && compare(path, {}, node.value)) {
        return recurse(node.value, node, rest);
    }
    else {
        var urlSegment = new url_tree_1.UrlSegment(path, {}, outlet);
        return recurse(urlSegment, node, rest);
    }
}
function stringify(params) {
    var res = {};
    collection_1.forEach(params, function (v, k) { return res[k] = v.toString(); });
    return res;
}
function compare(path, params, segment) {
    return path == segment.path && collection_1.shallowEqual(params, segment.parameters);
}
function recurse(urlSegment, node, rest) {
    if (rest.length === 0) {
        return new tree_1.TreeNode(urlSegment, []);
    }
    var children = node ? node.children.slice(0) : [];
    return new tree_1.TreeNode(urlSegment, updateMany(children, rest));
}
//# sourceMappingURL=data:application/json;base64,