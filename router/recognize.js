"use strict";
var collection_1 = require('./utils/collection');
var tree_1 = require('./utils/tree');
var router_state_1 = require('./router_state');
var BehaviorSubject_1 = require('rxjs/BehaviorSubject');
function recognize(componentResolver, config, url, existingState) {
    var match = new MatchResult(existingState.root.component, config, [url.root], {}, tree_1.rootNode(url).children, [], router_state_1.PRIMARY_OUTLET);
    return constructActivatedRoute(componentResolver, match, tree_1.rootNode(existingState)).
        then(function (roots) {
        existingState.queryParams.next(url.queryParameters);
        existingState.fragment.next(url.fragment);
        return new router_state_1.RouterState(roots[0], existingState.queryParams, existingState.fragment);
    });
}
exports.recognize = recognize;
function constructActivatedRoute(componentResolver, match, existingRoute) {
    return componentResolver.resolveComponent(match.component).then(function (factory) {
        var activatedRoute = createOrReuseRoute(match, factory, existingRoute);
        var existingChildren = existingRoute ? existingRoute.children : [];
        if (match.leftOverUrl.length > 0) {
            return recognizeMany(componentResolver, match.children, match.leftOverUrl, existingChildren)
                .then(checkOutletNameUniqueness)
                .then(function (children) { return [new tree_1.TreeNode(activatedRoute, children)]; });
        }
        else {
            return Promise.resolve([new tree_1.TreeNode(activatedRoute, [])]);
        }
    });
}
function recognizeMany(componentResolver, config, urls, existingRoutes) {
    var recognized = urls.map(function (url) { return recognizeOne(componentResolver, config, url, existingRoutes); });
    return Promise.all(recognized).then(collection_1.flatten);
}
function createOrReuseRoute(match, factory, existing) {
    if (existing) {
        var v = existing.value;
        if (v.component === match.component && v.outlet === match.outlet) {
            (v.params).next(match.parameters);
            (v.urlSegments).next(match.consumedUrlSegments);
            return v;
        }
    }
    return new router_state_1.ActivatedRoute(new BehaviorSubject_1.BehaviorSubject(match.consumedUrlSegments), new BehaviorSubject_1.BehaviorSubject(match.parameters), match.outlet, factory.componentType, factory);
}
function recognizeOne(componentResolver, config, url, existingRoutes) {
    var m;
    try {
        m = match(config, url);
    }
    catch (e) {
        return Promise.reject(e);
    }
    var routesWithRightOutlet = existingRoutes.filter(function (r) { return r.value.outlet == m.outlet; });
    var routeWithRightOutlet = routesWithRightOutlet.length > 0 ? routesWithRightOutlet[0] : null;
    var primary = constructActivatedRoute(componentResolver, m, routeWithRightOutlet);
    var secondary = recognizeMany(componentResolver, config, m.secondary, existingRoutes);
    return Promise.all([primary, secondary]).then(collection_1.flatten).then(checkOutletNameUniqueness);
}
function checkOutletNameUniqueness(nodes) {
    var names = {};
    nodes.forEach(function (n) {
        var routeWithSameOutletName = names[n.value.outlet];
        if (routeWithSameOutletName) {
            var p = routeWithSameOutletName.urlSegments.value.map(function (s) { return s.toString(); }).join("/");
            var c = n.value.urlSegments.value.map(function (s) { return s.toString(); }).join("/");
            throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
        }
        names[n.value.outlet] = n.value;
    });
    return nodes;
}
function match(config, url) {
    var m = matchNonIndex(config, url);
    if (m)
        return m;
    var mIndex = matchIndex(config, url);
    if (mIndex)
        return mIndex;
    var availableRoutes = config.map(function (r) { return ("'" + r.path + "'"); }).join(", ");
    throw new Error("Cannot match any routes. Current segment: '" + url.value + "'. Available routes: [" + availableRoutes + "].");
}
function matchNonIndex(config, url) {
    for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
        var r = config_1[_i];
        var m = matchWithParts(r, url);
        if (m)
            return m;
    }
    return null;
}
function matchIndex(config, url) {
    for (var _i = 0, config_2 = config; _i < config_2.length; _i++) {
        var r = config_2[_i];
        if (r.index) {
            var outlet = r.outlet ? r.outlet : router_state_1.PRIMARY_OUTLET;
            var children = r.children ? r.children : [];
            return new MatchResult(r.component, children, [], {}, [url], [], outlet);
        }
    }
    return null;
}
function matchWithParts(route, url) {
    if (!route.path)
        return null;
    var path = route.path.startsWith("/") ? route.path.substring(1) : route.path;
    if (path === "**") {
        var consumedUrl = [];
        var u = url;
        while (u) {
            consumedUrl.push(u.value);
            u = collection_1.first(u.children);
        }
        var last = consumedUrl[consumedUrl.length - 1];
        return new MatchResult(route.component, [], consumedUrl, last.parameters, [], [], router_state_1.PRIMARY_OUTLET);
    }
    var parts = path.split("/");
    var positionalParams = {};
    var consumedUrlSegments = [];
    var lastParent = null;
    var lastSegment = null;
    var current = url;
    for (var i = 0; i < parts.length; ++i) {
        if (!current)
            return null;
        var p_1 = parts[i];
        var isLastSegment = i === parts.length - 1;
        var isLastParent = i === parts.length - 2;
        var isPosParam = p_1.startsWith(":");
        if (!isPosParam && p_1 != current.value.path)
            return null;
        if (isLastSegment) {
            lastSegment = current;
        }
        if (isLastParent) {
            lastParent = current;
        }
        if (isPosParam) {
            positionalParams[p_1.substring(1)] = current.value.path;
        }
        consumedUrlSegments.push(current.value);
        current = collection_1.first(current.children);
    }
    if (!lastSegment)
        throw "Cannot be reached";
    var p = lastSegment.value.parameters;
    var parameters = collection_1.merge(p, positionalParams);
    var secondarySubtrees = lastParent ? lastParent.children.slice(1) : [];
    var children = route.children ? route.children : [];
    var outlet = route.outlet ? route.outlet : router_state_1.PRIMARY_OUTLET;
    return new MatchResult(route.component, children, consumedUrlSegments, parameters, lastSegment.children, secondarySubtrees, outlet);
}
var MatchResult = (function () {
    function MatchResult(component, children, consumedUrlSegments, parameters, leftOverUrl, secondary, outlet) {
        this.component = component;
        this.children = children;
        this.consumedUrlSegments = consumedUrlSegments;
        this.parameters = parameters;
        this.leftOverUrl = leftOverUrl;
        this.secondary = secondary;
        this.outlet = outlet;
    }
    return MatchResult;
}());
//# sourceMappingURL=data:application/json;base64,