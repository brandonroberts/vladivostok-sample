"use strict";
var collection_1 = require('./utils/collection');
var tree_1 = require('./utils/tree');
var router_state_1 = require('./router_state');
var shared_1 = require('./shared');
var Observable_1 = require('rxjs/Observable');
function recognize(rootComponentType, config, url) {
    try {
        var match_1 = new MatchResult(rootComponentType, config, [url.root], {}, url._root.children, [], shared_1.PRIMARY_OUTLET, null);
        var roots = constructActivatedRoute(match_1);
        var res_1 = new router_state_1.RouterStateSnapshot(roots[0], url.queryParameters, url.fragment);
        return new Observable_1.Observable(function (obs) {
            obs.next(res_1);
            obs.complete();
        });
    }
    catch (e) {
        return new Observable_1.Observable(function (obs) { return obs.error(e); });
    }
}
exports.recognize = recognize;
function constructActivatedRoute(match) {
    var activatedRoute = createActivatedRouteSnapshot(match);
    if (match.leftOverUrl.length > 0) {
        var children = recognizeMany(match.children, match.leftOverUrl);
        checkOutletNameUniqueness(children);
        children.sort(function (a, b) {
            if (a.value.outlet === shared_1.PRIMARY_OUTLET)
                return -1;
            if (b.value.outlet === shared_1.PRIMARY_OUTLET)
                return 1;
            return a.value.outlet.localeCompare(b.value.outlet);
        });
        return [new tree_1.TreeNode(activatedRoute, children)];
    }
    else {
        return [new tree_1.TreeNode(activatedRoute, [])];
    }
}
function recognizeMany(config, urls) {
    return collection_1.flatten(urls.map(function (url) { return recognizeOne(config, url); }));
}
function createActivatedRouteSnapshot(match) {
    return new router_state_1.ActivatedRouteSnapshot(match.consumedUrlSegments, match.parameters, match.outlet, match.component, match.route);
}
function recognizeOne(config, url) {
    var m = match(config, url);
    var primary = constructActivatedRoute(m);
    var secondary = recognizeMany(config, m.secondary);
    var res = primary.concat(secondary);
    checkOutletNameUniqueness(res);
    return res;
}
function checkOutletNameUniqueness(nodes) {
    var names = {};
    nodes.forEach(function (n) {
        var routeWithSameOutletName = names[n.value.outlet];
        if (routeWithSameOutletName) {
            var p = routeWithSameOutletName.urlSegments.map(function (s) { return s.toString(); }).join("/");
            var c = n.value.urlSegments.map(function (s) { return s.toString(); }).join("/");
            throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
        }
        names[n.value.outlet] = n.value;
    });
    return nodes;
}
function match(config, url) {
    var m = matchNonIndex(config, url);
    if (m)
        return m;
    var mIndex = matchIndex(config, url);
    if (mIndex)
        return mIndex;
    var availableRoutes = config.map(function (r) {
        var outlet = !r.outlet ? '' : r.outlet + ":";
        return "'" + outlet + r.path + "'";
    }).join(", ");
    throw new Error("Cannot match any routes. Current segment: '" + url.value + "'. Available routes: [" + availableRoutes + "].");
}
function matchNonIndex(config, url) {
    for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
        var r = config_1[_i];
        var m = matchWithParts(r, url);
        if (m)
            return m;
    }
    return null;
}
function matchIndex(config, url) {
    for (var _i = 0, config_2 = config; _i < config_2.length; _i++) {
        var r = config_2[_i];
        if (r.index) {
            var outlet = r.outlet ? r.outlet : shared_1.PRIMARY_OUTLET;
            var children = r.children ? r.children : [];
            return new MatchResult(r.component, children, [], {}, [url], [], outlet, r);
        }
    }
    return null;
}
function matchWithParts(route, url) {
    if (!route.path)
        return null;
    if ((route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET) !== url.value.outlet)
        return null;
    var path = route.path.startsWith("/") ? route.path.substring(1) : route.path;
    if (path === "**") {
        var consumedUrl = [];
        var u = url;
        while (u) {
            consumedUrl.push(u.value);
            u = collection_1.first(u.children);
        }
        var last = consumedUrl[consumedUrl.length - 1];
        return new MatchResult(route.component, [], consumedUrl, last.parameters, [], [], shared_1.PRIMARY_OUTLET, route);
    }
    var parts = path.split("/");
    var positionalParams = {};
    var consumedUrlSegments = [];
    var lastParent = null;
    var lastSegment = null;
    var current = url;
    for (var i = 0; i < parts.length; ++i) {
        if (!current)
            return null;
        var p_1 = parts[i];
        var isLastSegment = i === parts.length - 1;
        var isLastParent = i === parts.length - 2;
        var isPosParam = p_1.startsWith(":");
        if (!isPosParam && p_1 != current.value.path)
            return null;
        if (isLastSegment) {
            lastSegment = current;
        }
        if (isLastParent) {
            lastParent = current;
        }
        if (isPosParam) {
            positionalParams[p_1.substring(1)] = current.value.path;
        }
        consumedUrlSegments.push(current.value);
        current = collection_1.first(current.children);
    }
    if (!lastSegment)
        throw "Cannot be reached";
    var p = lastSegment.value.parameters;
    var parameters = collection_1.merge(p, positionalParams);
    var secondarySubtrees = lastParent ? lastParent.children.slice(1) : [];
    var children = route.children ? route.children : [];
    var outlet = route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET;
    return new MatchResult(route.component, children, consumedUrlSegments, parameters, lastSegment.children, secondarySubtrees, outlet, route);
}
var MatchResult = (function () {
    function MatchResult(component, children, consumedUrlSegments, parameters, leftOverUrl, secondary, outlet, route) {
        this.component = component;
        this.children = children;
        this.consumedUrlSegments = consumedUrlSegments;
        this.parameters = parameters;
        this.leftOverUrl = leftOverUrl;
        this.secondary = secondary;
        this.outlet = outlet;
        this.route = route;
    }
    return MatchResult;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb2duaXplLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JlY29nbml6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsMkJBQXNDLG9CQUFvQixDQUFDLENBQUE7QUFDM0QscUJBQXlCLGNBQWMsQ0FBQyxDQUFBO0FBQ3hDLDZCQUE0RCxnQkFBZ0IsQ0FBQyxDQUFBO0FBQzdFLHVCQUF1QyxVQUFVLENBQUMsQ0FBQTtBQUdsRCwyQkFBMkIsaUJBQWlCLENBQUMsQ0FBQTtBQUU3QyxtQkFBMEIsaUJBQXVCLEVBQUUsTUFBb0IsRUFBRSxHQUFZO0lBQ25GLElBQUksQ0FBQztRQUNILElBQU0sT0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLHVCQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkgsSUFBTSxLQUFLLEdBQUcsdUJBQXVCLENBQUMsT0FBSyxDQUFDLENBQUM7UUFDN0MsSUFBTSxLQUFHLEdBQUcsSUFBSSxrQ0FBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakYsTUFBTSxDQUFDLElBQUksdUJBQVUsQ0FBc0IsVUFBQSxHQUFHO1lBQzVDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBRyxDQUFDLENBQUM7WUFDZCxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFFO0lBQUEsS0FBSyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNWLE1BQU0sQ0FBQyxJQUFJLHVCQUFVLENBQXNCLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMs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SUFDNUIsQ0FBQztJQUNOLGtCQUFDO0FBQUQsQ0FBQyxBQVZELElBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVcmxUcmVlLCBVcmxTZWdtZW50IH0gZnJvbSAnLi91cmxfdHJlZSc7XG5pbXBvcnQgeyBmbGF0dGVuLCBmaXJzdCwgbWVyZ2UgfSBmcm9tICcuL3V0aWxzL2NvbGxlY3Rpb24nO1xuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tICcuL3V0aWxzL3RyZWUnO1xuaW1wb3J0IHsgUm91dGVyU3RhdGVTbmFwc2hvdCwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCB9IGZyb20gJy4vcm91dGVyX3N0YXRlJztcbmltcG9ydCB7IFBhcmFtcywgUFJJTUFSWV9PVVRMRVQgfSBmcm9tICcuL3NoYXJlZCc7XG5pbXBvcnQgeyBSb3V0ZXJDb25maWcsIFJvdXRlIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNvZ25pemUocm9vdENvbXBvbmVudFR5cGU6IFR5cGUsIGNvbmZpZzogUm91dGVyQ29uZmlnLCB1cmw6IFVybFRyZWUpOiBPYnNlcnZhYmxlPFJvdXRlclN0YXRlU25hcHNob3Q+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBtYXRjaCA9IG5ldyBNYXRjaFJlc3VsdChyb290Q29tcG9uZW50VHlwZSwgY29uZmlnLCBbdXJsLnJvb3RdLCB7fSwgdXJsLl9yb290LmNoaWxkcmVuLCBbXSwgUFJJTUFSWV9PVVRMRVQsIG51bGwpO1xuICAgIGNvbnN0IHJvb3RzID0gY29uc3RydWN0QWN0aXZhdGVkUm91dGUobWF0Y2gpO1xuICAgIGNvbnN0IHJlcyA9IG5ldyBSb3V0ZXJTdGF0ZVNuYXBzaG90KHJvb3RzWzBdLCB1cmwucXVlcnlQYXJhbWV0ZXJzLCB1cmwuZnJhZ21lbnQpO1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxSb3V0ZXJTdGF0ZVNuYXBzaG90PihvYnMgPT4ge1xuICAgICAgb2JzLm5leHQocmVzKTtcbiAgICAgIG9icy5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8Um91dGVyU3RhdGVTbmFwc2hvdD4ob2JzID0+IG9icy5lcnJvcihlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uc3RydWN0QWN0aXZhdGVkUm91dGUobWF0Y2g6IE1hdGNoUmVzdWx0KTogVHJlZU5vZGU8QWN0aXZhdGVkUm91dGVTbmFwc2hvdD5bXSB7XG4gIGNvbnN0IGFjdGl2YXRlZFJvdXRlID0gY3JlYXRlQWN0aXZhdGVkUm91dGVTbmFwc2hvdChtYXRjaCk7XG4gIGlmIChtYXRjaC5sZWZ0T3ZlclVybC5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSByZWNvZ25pemVNYW55KG1hdGNoLmNoaWxkcmVuLCBtYXRjaC5sZWZ0T3ZlclVybCk7XG4gICAgY2hlY2tPdXRsZXROYW1lVW5pcXVlbmVzcyhjaGlsZHJlbik7XG4gICAgY2hpbGRyZW4uc29ydCgoYSwgYikgPT4ge1xuICAgICAgaWYgKGEudmFsdWUub3V0bGV0ID09PSBQUklNQVJZX09VVExFVCkgcmV0dXJuIC0xO1xuICAgICAgaWYgKGIudmFsdWUub3V0bGV0ID09PSBQUklNQVJZX09VVExFVCkgcmV0dXJuIDE7XG4gICAgICByZXR1cm4gYS52YWx1ZS5vdXRsZXQubG9jYWxlQ29tcGFyZShiLnZhbHVlLm91dGxldClcbiAgICB9KTtcbiAgICByZXR1cm4gW25ldyBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90PihhY3RpdmF0ZWRSb3V0ZSwgY2hpbGRyZW4pXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW25ldyBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90PihhY3RpdmF0ZWRSb3V0ZSwgW10pXTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvZ25pemVNYW55KGNvbmZpZzogUm91dGVbXSwgdXJsczogVHJlZU5vZGU8VXJsU2VnbWVudD5bXSk6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+W10ge1xuICByZXR1cm4gZmxhdHRlbih1cmxzLm1hcCh1cmwgPT4gcmVjb2duaXplT25lKGNvbmZpZywgdXJsKSkpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KG1hdGNoOiBNYXRjaFJlc3VsdCk6IEFjdGl2YXRlZFJvdXRlU25hcHNob3Qge1xuICByZXR1cm4gbmV3IEFjdGl2YXRlZFJvdXRlU25hcHNob3QobWF0Y2guY29uc3VtZWRVcmxTZWdtZW50cywgbWF0Y2gucGFyYW1ldGVycywgbWF0Y2gub3V0bGV0LCBtYXRjaC5jb21wb25lbnQsIG1hdGNoLnJvdXRlKTtcbn1cblxuZnVuY3Rpb24gcmVjb2duaXplT25lKGNvbmZpZzogUm91dGVbXSwgdXJsOiBUcmVlTm9kZTxVcmxTZWdtZW50Pik6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+W10ge1xuICBjb25zdCBtID0gbWF0Y2goY29uZmlnLCB1cmwpO1xuICBjb25zdCBwcmltYXJ5ID0gY29uc3RydWN0QWN0aXZhdGVkUm91dGUobSk7XG4gIGNvbnN0IHNlY29uZGFyeSA9IHJlY29nbml6ZU1hbnkoY29uZmlnLCBtLnNlY29uZGFyeSk7XG4gIGNvbnN0IHJlcyA9IHByaW1hcnkuY29uY2F0KHNlY29uZGFyeSk7XG4gIGNoZWNrT3V0bGV0TmFtZVVuaXF1ZW5lc3MocmVzKTtcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gY2hlY2tPdXRsZXROYW1lVW5pcXVlbmVzcyhub2RlczogVHJlZU5vZGU8QWN0aXZhdGVkUm91dGVTbmFwc2hvdD5bXSk6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+W10ge1xuICBsZXQgbmFtZXMgPSB7fTtcbiAgbm9kZXMuZm9yRWFjaChuID0+IHtcbiAgICBsZXQgcm91dGVXaXRoU2FtZU91dGxldE5hbWUgPSBuYW1lc1tuLnZhbHVlLm91dGxldF07XG4gICAgaWYgKHJvdXRlV2l0aFNhbWVPdXRsZXROYW1lKSB7XG4gICAgICBjb25zdCBwID0gcm91dGVXaXRoU2FtZU91dGxldE5hbWUudXJsU2VnbWVudHMubWFwKHMgPT4gcy50b1N0cmluZygpKS5qb2luKFwiL1wiKTtcbiAgICAgIGNvbnN0IGMgPSBuLnZhbHVlLnVybFNlZ21lbnRzLm1hcChzID0+IHMudG9TdHJpbmcoKSkuam9pbihcIi9cIik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFR3byBzZWdtZW50cyBjYW5ub3QgaGF2ZSB0aGUgc2FtZSBvdXRsZXQgbmFtZTogJyR7cH0nIGFuZCAnJHtjfScuYCk7XG4gICAgfVxuICAgIG5hbWVzW24udmFsdWUub3V0bGV0XSA9IG4udmFsdWU7XG4gIH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIG1hdGNoKGNvbmZpZzogUm91dGVbXSwgdXJsOiBUcmVlTm9kZTxVcmxTZWdtZW50Pik6IE1hdGNoUmVzdWx0IHtcbiAgY29uc3QgbSA9IG1hdGNoTm9uSW5kZXgoY29uZmlnLCB1cmwpO1xuICBpZiAobSkgcmV0dXJuIG07XG5cbiAgY29uc3QgbUluZGV4ID0gbWF0Y2hJbmRleChjb25maWcsIHVybCk7XG4gIGlmIChtSW5kZXgpIHJldHVybiBtSW5kZXg7XG5cbiAgY29uc3QgYXZhaWxhYmxlUm91dGVzID0gY29uZmlnLm1hcChyID0+IHtcbiAgICBjb25zdCBvdXRsZXQgPSAhci5vdXRsZXQgPyAnJyA6IGAke3Iub3V0bGV0fTpgO1xuICAgIHJldHVybiBgJyR7b3V0bGV0fSR7ci5wYXRofSdgO1xuICB9KS5qb2luKFwiLCBcIik7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICBgQ2Fubm90IG1hdGNoIGFueSByb3V0ZXMuIEN1cnJlbnQgc2VnbWVudDogJyR7dXJsLnZhbHVlfScuIEF2YWlsYWJsZSByb3V0ZXM6IFske2F2YWlsYWJsZVJvdXRlc31dLmApO1xufVxuXG5mdW5jdGlvbiBtYXRjaE5vbkluZGV4KGNvbmZpZzogUm91dGVbXSwgdXJsOiBUcmVlTm9kZTxVcmxTZWdtZW50Pik6IE1hdGNoUmVzdWx0IHwgbnVsbCB7XG4gIGZvciAobGV0IHIgb2YgY29uZmlnKSB7XG4gICAgbGV0IG0gPSBtYXRjaFdpdGhQYXJ0cyhyLCB1cmwpO1xuICAgIGlmIChtKSByZXR1cm4gbTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gbWF0Y2hJbmRleChjb25maWc6IFJvdXRlW10sIHVybDogVHJlZU5vZGU8VXJsU2VnbWVudD4pOiBNYXRjaFJlc3VsdCB8IG51bGwge1xuICBmb3IgKGxldCByIG9mIGNvbmZpZykge1xuICAgIGlmIChyLmluZGV4KSB7XG4gICAgICBjb25zdCBvdXRsZXQgPSByLm91dGxldCA/IHIub3V0bGV0IDogUFJJTUFSWV9PVVRMRVQ7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IHIuY2hpbGRyZW4gPyByLmNoaWxkcmVuIDogW107XG4gICAgICByZXR1cm4gbmV3IE1hdGNoUmVzdWx0KHIuY29tcG9uZW50LCBjaGlsZHJlbiwgW10sIHt9LCBbdXJsXSwgW10sIG91dGxldCwgcik7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBtYXRjaFdpdGhQYXJ0cyhyb3V0ZTogUm91dGUsIHVybDogVHJlZU5vZGU8VXJsU2VnbWVudD4pOiBNYXRjaFJlc3VsdCB8IG51bGwge1xuICBpZiAoIXJvdXRlLnBhdGgpIHJldHVybiBudWxsO1xuICBpZiAoKHJvdXRlLm91dGxldCA/IHJvdXRlLm91dGxldCA6IFBSSU1BUllfT1VUTEVUKSAhPT0gdXJsLnZhbHVlLm91dGxldCkgcmV0dXJuIG51bGw7XG5cbiAgY29uc3QgcGF0aCA9IHJvdXRlLnBhdGguc3RhcnRzV2l0aChcIi9cIikgPyByb3V0ZS5wYXRoLnN1YnN0cmluZygxKSA6IHJvdXRlLnBhdGg7XG4gIGlmIChwYXRoID09PSBcIioqXCIpIHtcbiAgICBjb25zdCBjb25zdW1lZFVybCA9IFtdO1xuICAgIGxldCB1OlRyZWVOb2RlPFVybFNlZ21lbnQ+fG51bGwgPSB1cmw7XG4gICAgd2hpbGUgKHUpIHtcbiAgICAgIGNvbnN1bWVkVXJsLnB1c2godS52YWx1ZSk7XG4gICAgICB1ID0gZmlyc3QodS5jaGlsZHJlbik7XG4gICAgfVxuICAgIGNvbnN0IGxhc3QgPSBjb25zdW1lZFVybFtjb25zdW1lZFVybC5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gbmV3IE1hdGNoUmVzdWx0KHJvdXRlLmNvbXBvbmVudCwgW10sIGNvbnN1bWVkVXJsLCBsYXN0LnBhcmFtZXRlcnMsIFtdLCBbXSwgUFJJTUFSWV9PVVRMRVQsIHJvdXRlKTtcbiAgfVxuXG4gIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGNvbnN0IHBvc2l0aW9uYWxQYXJhbXMgPSB7fTtcbiAgY29uc3QgY29uc3VtZWRVcmxTZWdtZW50cyA9IFtdO1xuXG4gIGxldCBsYXN0UGFyZW50OiBUcmVlTm9kZTxVcmxTZWdtZW50PnxudWxsID0gbnVsbDtcbiAgbGV0IGxhc3RTZWdtZW50OiBUcmVlTm9kZTxVcmxTZWdtZW50PnxudWxsID0gbnVsbDtcblxuICBsZXQgY3VycmVudDogVHJlZU5vZGU8VXJsU2VnbWVudD58bnVsbCA9IHVybDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgIGlmICghY3VycmVudCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBwID0gcGFydHNbaV07XG4gICAgY29uc3QgaXNMYXN0U2VnbWVudCA9IGkgPT09IHBhcnRzLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgaXNMYXN0UGFyZW50ID0gaSA9PT0gcGFydHMubGVuZ3RoIC0gMjtcbiAgICBjb25zdCBpc1Bvc1BhcmFtID0gcC5zdGFydHNXaXRoKFwiOlwiKTtcblxuICAgIGlmICghaXNQb3NQYXJhbSAmJiBwICE9IGN1cnJlbnQudmFsdWUucGF0aCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzTGFzdFNlZ21lbnQpIHtcbiAgICAgIGxhc3RTZWdtZW50ID0gY3VycmVudDtcbiAgICB9XG4gICAgaWYgKGlzTGFzdFBhcmVudCkge1xuICAgICAgbGFzdFBhcmVudCA9IGN1cnJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGlzUG9zUGFyYW0pIHtcbiAgICAgIHBvc2l0aW9uYWxQYXJhbXNbcC5zdWJzdHJpbmcoMSldID0gY3VycmVudC52YWx1ZS5wYXRoO1xuICAgIH1cblxuICAgIGNvbnN1bWVkVXJsU2VnbWVudHMucHVzaChjdXJyZW50LnZhbHVlKTtcblxuICAgIGN1cnJlbnQgPSBmaXJzdChjdXJyZW50LmNoaWxkcmVuKTtcbiAgfVxuXG4gIGlmICghbGFzdFNlZ21lbnQpIHRocm93IFwiQ2Fubm90IGJlIHJlYWNoZWRcIjtcblxuICBjb25zdCBwID0gbGFzdFNlZ21lbnQudmFsdWUucGFyYW1ldGVycztcbiAgY29uc3QgcGFyYW1ldGVycyA9IDx7W2tleTogc3RyaW5nXTogc3RyaW5nfT5tZXJnZShwLCBwb3NpdGlvbmFsUGFyYW1zKTtcbiAgY29uc3Qgc2Vjb25kYXJ5U3VidHJlZXMgPSBsYXN0UGFyZW50ID8gbGFzdFBhcmVudC5jaGlsZHJlbi5zbGljZSgxKSA6IFtdO1xuICBjb25zdCBjaGlsZHJlbiA9IHJvdXRlLmNoaWxkcmVuID8gcm91dGUuY2hpbGRyZW4gOiBbXTtcbiAgY29uc3Qgb3V0bGV0ID0gcm91dGUub3V0bGV0ID8gcm91dGUub3V0bGV0IDogUFJJTUFSWV9PVVRMRVQ7XG5cbiAgcmV0dXJuIG5ldyBNYXRjaFJlc3VsdChyb3V0ZS5jb21wb25lbnQsIGNoaWxkcmVuLCBjb25zdW1lZFVybFNlZ21lbnRzLCBwYXJhbWV0ZXJzLCBsYXN0U2VnbWVudC5jaGlsZHJlbixcbiAgICBzZWNvbmRhcnlTdWJ0cmVlcywgb3V0bGV0LCByb3V0ZSk7XG59XG5cbmNsYXNzIE1hdGNoUmVzdWx0IHtcbiAgY29uc3RydWN0b3IocHVibGljIGNvbXBvbmVudDogVHlwZSB8IHN0cmluZyxcbiAgICAgICAgICAgICAgcHVibGljIGNoaWxkcmVuOiBSb3V0ZVtdLFxuICAgICAgICAgICAgICBwdWJsaWMgY29uc3VtZWRVcmxTZWdtZW50czogVXJsU2VnbWVudFtdLFxuICAgICAgICAgICAgICBwdWJsaWMgcGFyYW1ldGVyczoge1trZXk6IHN0cmluZ106IHN0cmluZ30sXG4gICAgICAgICAgICAgIHB1YmxpYyBsZWZ0T3ZlclVybDogVHJlZU5vZGU8VXJsU2VnbWVudD5bXSxcbiAgICAgICAgICAgICAgcHVibGljIHNlY29uZGFyeTogVHJlZU5vZGU8VXJsU2VnbWVudD5bXSxcbiAgICAgICAgICAgICAgcHVibGljIG91dGxldDogc3RyaW5nLFxuICAgICAgICAgICAgICBwdWJsaWMgcm91dGU6IFJvdXRlXG4gICkge31cbn0iXX0=